// BEGIN EEYORE
//--- GLOBAL DECL
var T0 // global: n

//--- GLOBAL INIT

//--- FUNCTIONS
f_swap [3]
var T1 // local: temp
var t0
var t1
var t2
var t3
var t4
var t5
var t6
var t7
var t8
var t9
    t1 = 4 * p1
    t2 = p0 + t1
    t0 = t2 [0]
    T1 = t0
    t4 = 4 * p2
    t5 = p0 + t4
    t3 = t5 [0]
    t6 = 4 * p1
    t7 = p0 + t6
    t7 [0] = t3
    t8 = 4 * p2
    t9 = p0 + t8
    t9 [0] = T1
    return 0
    return 0 // stmt: func epilog
end f_swap

f_heap_ajust [3]
var T2 // local: dad
var T3 // local: son
var t10
var t11
var t12
var t13
var t14
var t15
var t16
var t17
var t18
var t19
var t20
var t21
var t22
var t23
var t24
var t25
var t26
var t27
var t28
var t29
var t30
var t31
var t32
var t33
var t34
var t35
    T2 = p1
    t11 = T2 * 2
    T3 = t11 + 1
    l0: // stmt: while - ltest
    t13 = p2 + 1
    if T3 >= t13 goto l1 // stmt: while - done
    t14 = 0 // stmt: op and - default value
    if T3 >= p2 goto l2 // stmt: op and - test 1
    t18 = 4 * T3
    t19 = p0 + t18
    t17 = t19 [0]
    t22 = T3 + 1
    t21 = 4 * t22
    t23 = p0 + t21
    t20 = t23 [0]
    if t17 >= t20 goto l2 // stmt: op and - test 2
    t14 = 1 // stmt: op and - passed test
    l2: // stmt: op and - lskip
    if t14 == 0 goto l3 // stmt: ifonly
    T3 = T3 + 1
    l3: // stmt: ifonly - lskip
    t27 = 4 * T2
    t28 = p0 + t27
    t26 = t28 [0]
    t30 = 4 * T3
    t31 = p0 + t30
    t29 = t31 [0]
    if t26 <= t29 goto l4 // stmt: ifelse
    return 0
    goto l5 // stmt: ifelse - true done
    l4: // stmt: ifelse - lfalse
    t33 = p0 + 0 // stmt: param array access
    param t33 // #0
    param T2 // #1
    param T3 // #2
    T2 = call f_swap
    T2 = T3
    t35 = T2 * 2
    T3 = t35 + 1
    l5: // stmt: ifelse - ldone
    goto l0 // stmt: while - to test
    l1: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_heap_ajust

f_heap_sort [2]
var T4 // local: i
var T5 // local: tmp
var t36
var t37
var t38
var t39
var t40
var t41
var t42
var t43
var t44
var T6 // local: tmp0
var t45
var t46
var t47
var t48
var t49
var t50
    t37 = p1 / 2
    T4 = t37 - 1
    l6: // stmt: while - ltest
    if T4 <= -1 goto l7 // stmt: while - done
    T5 = p1 - 1
    t41 = p0 + 0 // stmt: param array access
    param t41 // #0
    param T4 // #1
    param T5 // #2
    T5 = call f_heap_ajust
    T4 = T4 - 1
    goto l6 // stmt: while - to test
    l7: // stmt: while - ldone
    T4 = p1 - 1
    l8: // stmt: while - ltest
    if T4 <= 0 goto l9 // stmt: while - done
    T6 = 0
    t46 = p0 + 0 // stmt: param array access
    param t46 // #0
    param T6 // #1
    param T4 // #2
    T5 = call f_swap
    T5 = T4 - 1
    t49 = p0 + 0 // stmt: param array access
    param t49 // #0
    param T6 // #1
    param T5 // #2
    T5 = call f_heap_ajust
    T4 = T4 - 1
    goto l8 // stmt: while - to test
    l9: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_heap_sort

f_main [0]
var 40 T7 // local: a
var T8 // local: i
var t51
var t52
var t53
var T9 // local: tmp
var t54
var t55
var t56
var t57
    T0 = 10
    T7 [0] = 4
    T7 [4] = 3
    T7 [8] = 9
    T7 [12] = 2
    T7 [16] = 0
    T7 [20] = 1
    T7 [24] = 6
    T7 [28] = 5
    T7 [32] = 7
    T7 [36] = 8
    T8 = 0
    t52 = T7 + 0 // stmt: param array access
    param t52 // #0
    param T0 // #1
    T8 = call f_heap_sort
    l10: // stmt: while - ltest
    if T8 >= T0 goto l11 // stmt: while - done
    t55 = 4 * T8
    t56 = T7 + t55
    t54 = t56 [0]
    T9 = t54
    param T9 // #0
    call f_putint
    T9 = 10
    param T9 // #0
    call f_putch
    T8 = T8 + 1
    goto l10 // stmt: while - to test
    l11: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_main

// END EEYORE
