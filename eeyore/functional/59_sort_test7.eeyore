// BEGIN EEYORE
//--- GLOBAL DECL
var T0 // global: n

//--- GLOBAL INIT

//--- FUNCTIONS
f_Merge [4]
var T1 // local: n1
var t0
var t1
var T2 // local: n2
var t2
var 40 T3 // local: L
var 40 T4 // local: R
var T5 // local: i
var T6 // local: j
var t3
var t4
var t5
var t6
var t7
var t8
var t9
var t10
var t11
var t12
var t13
var t14
var t15
var t16
var t17
var t18
var t19
var T7 // local: k
var t20
var t21
var t22
var t23
var t24
var t25
var t26
var t27
var t28
var t29
var t30
var t31
var t32
var t33
var t34
var t35
var t36
var t37
var t38
var t39
var t40
var t41
var t42
var t43
var t44
var t45
var t46
var t47
var t48
var t49
var t50
var t51
var t52
var t53
var t54
var t55
var t56
var t57
var t58
var t59
var t60
    t1 = p2 - p1
    T1 = t1 + 1
    T2 = p3 - p2
    T5 = 0
    T6 = 0
    l0: // stmt: while - ltest
    if T5 >= T1 goto l1 // stmt: while - done
    t6 = T5 + p1
    t5 = 4 * t6
    t7 = p0 + t5
    t4 = t7 [0]
    t8 = 4 * T5
    t9 = T3 + t8
    t9 [0] = t4
    T5 = T5 + 1
    goto l0 // stmt: while - to test
    l1: // stmt: while - ldone
    l2: // stmt: while - ltest
    if T6 >= T2 goto l3 // stmt: while - done
    t15 = T6 + p2
    t14 = t15 + 1
    t13 = 4 * t14
    t16 = p0 + t13
    t12 = t16 [0]
    t17 = 4 * T6
    t18 = T4 + t17
    t18 [0] = t12
    T6 = T6 + 1
    goto l2 // stmt: while - to test
    l3: // stmt: while - ldone
    T5 = 0
    T6 = 0
    T7 = p1
    l4: // stmt: while - ltest
    t20 = 0 // stmt: op and - default value
    if T5 == T1 goto l6 // stmt: op and - test 1
    if T6 == T2 goto l6 // stmt: op and - test 2
    t20 = 1 // stmt: op and - passed test
    l6: // stmt: op and - lskip
    if t20 == 0 goto l5 // stmt: while - done
    t25 = 4 * T5
    t26 = T3 + t25
    t24 = t26 [0]
    t29 = 4 * T6
    t30 = T4 + t29
    t28 = t30 [0]
    t27 = t28 + 1
    if t24 >= t27 goto l7 // stmt: ifelse
    t32 = 4 * T5
    t33 = T3 + t32
    t31 = t33 [0]
    t34 = 4 * T7
    t35 = p0 + t34
    t35 [0] = t31
    T7 = T7 + 1
    T5 = T5 + 1
    goto l8 // stmt: ifelse - true done
    l7: // stmt: ifelse - lfalse
    t39 = 4 * T6
    t40 = T4 + t39
    t38 = t40 [0]
    t41 = 4 * T7
    t42 = p0 + t41
    t42 [0] = t38
    T7 = T7 + 1
    T6 = T6 + 1
    l8: // stmt: ifelse - ldone
    goto l4 // stmt: while - to test
    l5: // stmt: while - ldone
    l9: // stmt: while - ltest
    if T5 >= T1 goto l10 // stmt: while - done
    t47 = 4 * T5
    t48 = T3 + t47
    t46 = t48 [0]
    t49 = 4 * T7
    t50 = p0 + t49
    t50 [0] = t46
    T7 = T7 + 1
    T5 = T5 + 1
    goto l9 // stmt: while - to test
    l10: // stmt: while - ldone
    l11: // stmt: while - ltest
    if T6 >= T2 goto l12 // stmt: while - done
    t55 = 4 * T6
    t56 = T4 + t55
    t54 = t56 [0]
    t57 = 4 * T7
    t58 = p0 + t57
    t58 [0] = t54
    T7 = T7 + 1
    T6 = T6 + 1
    goto l11 // stmt: while - to test
    l12: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_Merge

f_MergeSort [3]
var t61
var T8 // local: mid
var t62
var t63
var T9 // local: tmp
var t64
var t65
var t66
var t67
var t68
var t69
var t70
    if p1 >= p2 goto l13 // stmt: ifonly
    t63 = p1 + p2
    T8 = t63 / 2
    t65 = p0 + 0 // stmt: param array access
    param t65 // #0
    param p1 // #1
    param T8 // #2
    T9 = call f_MergeSort
    T9 = T8 + 1
    t68 = p0 + 0 // stmt: param array access
    param t68 // #0
    param T9 // #1
    param p2 // #2
    T9 = call f_MergeSort
    t70 = p0 + 0 // stmt: param array access
    param t70 // #0
    param p1 // #1
    param T8 // #2
    param p2 // #3
    T9 = call f_Merge
    l13: // stmt: ifonly - lskip
    return 0
    return 0 // stmt: func epilog
end f_MergeSort

f_main [0]
var 40 T10 // local: a
var T11 // local: i
var T12 // local: tmp
var t71
var t72
var t73
var t74
var t75
var t76
var t77
var t78
    T0 = 10
    T10 [0] = 4
    T10 [4] = 3
    T10 [8] = 9
    T10 [12] = 2
    T10 [16] = 0
    T10 [20] = 1
    T10 [24] = 6
    T10 [28] = 5
    T10 [32] = 7
    T10 [36] = 8
    T11 = 0
    T12 = T0 - 1
    t73 = T10 + 0 // stmt: param array access
    param t73 // #0
    param T11 // #1
    param T12 // #2
    T11 = call f_MergeSort
    l14: // stmt: while - ltest
    if T11 >= T0 goto l15 // stmt: while - done
    t76 = 4 * T11
    t77 = T10 + t76
    t75 = t77 [0]
    T12 = t75
    param T12 // #0
    call f_putint
    T12 = 10
    param T12 // #0
    call f_putch
    T11 = T11 + 1
    goto l14 // stmt: while - to test
    l15: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_main

// END EEYORE
