// BEGIN EEYORE
//--- GLOBAL DECL
var T0 // global: n

//--- GLOBAL INIT

//--- FUNCTIONS
f_bubblesort [1]
var T1 // local: i
var T2 // local: j
var t0
var t1
var t2
var t3
var t4
var t5
var t6
var t7
var t8
var t9
var t10
var t11
var t12
var T3 // local: tmp
var t13
var t14
var t15
var t16
var t17
var t18
var t19
var t20
var t21
var t22
var t23
var t24
var t25
var t26
    T1 = 0
    l0: // stmt: while - ltest
    t1 = T0 - 1
    if T1 >= t1 goto l1 // stmt: while - done
    T2 = 0
    l2: // stmt: while - ltest
    t4 = T0 - T1
    t3 = t4 - 1
    if T2 >= t3 goto l3 // stmt: while - done
    t7 = 4 * T2
    t8 = p0 + t7
    t6 = t8 [0]
    t11 = T2 + 1
    t10 = 4 * t11
    t12 = p0 + t10
    t9 = t12 [0]
    if t6 <= t9 goto l4 // stmt: ifonly
    t15 = T2 + 1
    t14 = 4 * t15
    t16 = p0 + t14
    t13 = t16 [0]
    T3 = t13
    t18 = 4 * T2
    t19 = p0 + t18
    t17 = t19 [0]
    t21 = T2 + 1
    t20 = 4 * t21
    t22 = p0 + t20
    t22 [0] = t17
    t23 = 4 * T2
    t24 = p0 + t23
    t24 [0] = T3
    l4: // stmt: ifonly - lskip
    T2 = T2 + 1
    goto l2 // stmt: while - to test
    l3: // stmt: while - ldone
    T1 = T1 + 1
    goto l0 // stmt: while - to test
    l1: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_bubblesort

f_insertsort [1]
var T4 // local: i
var t27
var T5 // local: temp
var t28
var t29
var t30
var T6 // local: j
var t31
var t32
var t33
var t34
var t35
var t36
var t37
var t38
var t39
var t40
var t41
var t42
var t43
var t44
var t45
var t46
var t47
var t48
    T4 = 1
    l5: // stmt: while - ltest
    if T4 >= T0 goto l6 // stmt: while - done
    t29 = 4 * T4
    t30 = p0 + t29
    t28 = t30 [0]
    T5 = t28
    T6 = T4 - 1
    l7: // stmt: while - ltest
    t32 = 0 // stmt: op and - default value
    if T6 <= -1 goto l9 // stmt: op and - test 1
    t36 = 4 * T6
    t37 = p0 + t36
    t35 = t37 [0]
    if T5 >= t35 goto l9 // stmt: op and - test 2
    t32 = 1 // stmt: op and - passed test
    l9: // stmt: op and - lskip
    if t32 == 0 goto l8 // stmt: while - done
    t39 = 4 * T6
    t40 = p0 + t39
    t38 = t40 [0]
    t42 = T6 + 1
    t41 = 4 * t42
    t43 = p0 + t41
    t43 [0] = t38
    T6 = T6 - 1
    goto l7 // stmt: while - to test
    l8: // stmt: while - ldone
    t46 = T6 + 1
    t45 = 4 * t46
    t47 = p0 + t45
    t47 [0] = T5
    T4 = T4 + 1
    goto l5 // stmt: while - to test
    l6: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_insertsort

f_QuickSort [3]
var t49
var T7 // local: i
var T8 // local: j
var T9 // local: k
var t50
var t51
var t52
var t53
var t54
var t55
var t56
var t57
var t58
var t59
var t60
var t61
var t62
var t63
var t64
var t65
var t66
var t67
var t68
var t69
var t70
var t71
var t72
var t73
var t74
var t75
var t76
var t77
var t78
var t79
var t80
var t81
var t82
var t83
var t84
var T10 // local: tmp
var t85
var t86
var t87
var t88
var t89
var t90
    if p1 >= p2 goto l10 // stmt: ifonly
    T7 = p1
    T8 = p2
    t51 = 4 * p1
    t52 = p0 + t51
    t50 = t52 [0]
    T9 = t50
    l11: // stmt: while - ltest
    if T7 >= T8 goto l12 // stmt: while - done
    l13: // stmt: while - ltest
    t54 = 0 // stmt: op and - default value
    if T7 >= T8 goto l15 // stmt: op and - test 1
    t58 = 4 * T8
    t59 = p0 + t58
    t57 = t59 [0]
    t60 = T9 - 1
    if t57 <= t60 goto l15 // stmt: op and - test 2
    t54 = 1 // stmt: op and - passed test
    l15: // stmt: op and - lskip
    if t54 == 0 goto l14 // stmt: while - done
    T8 = T8 - 1
    goto l13 // stmt: while - to test
    l14: // stmt: while - ldone
    if T7 >= T8 goto l16 // stmt: ifonly
    t64 = 4 * T8
    t65 = p0 + t64
    t63 = t65 [0]
    t66 = 4 * T7
    t67 = p0 + t66
    t67 [0] = t63
    T7 = T7 + 1
    l16: // stmt: ifonly - lskip
    l17: // stmt: while - ltest
    t69 = 0 // stmt: op and - default value
    if T7 >= T8 goto l19 // stmt: op and - test 1
    t73 = 4 * T7
    t74 = p0 + t73
    t72 = t74 [0]
    if t72 >= T9 goto l19 // stmt: op and - test 2
    t69 = 1 // stmt: op and - passed test
    l19: // stmt: op and - lskip
    if t69 == 0 goto l18 // stmt: while - done
    T7 = T7 + 1
    goto l17 // stmt: while - to test
    l18: // stmt: while - ldone
    if T7 >= T8 goto l20 // stmt: ifonly
    t78 = 4 * T7
    t79 = p0 + t78
    t77 = t79 [0]
    t80 = 4 * T8
    t81 = p0 + t80
    t81 [0] = t77
    T8 = T8 - 1
    l20: // stmt: ifonly - lskip
    goto l11 // stmt: while - to test
    l12: // stmt: while - ldone
    t83 = 4 * T7
    t84 = p0 + t83
    t84 [0] = T9
    T10 = T7 - 1
    t87 = p0 + 0 // stmt: param array access
    param t87 // #0
    param p1 // #1
    param T10 // #2
    T10 = call f_QuickSort
    T10 = T7 + 1
    t90 = p0 + 0 // stmt: param array access
    param t90 // #0
    param T10 // #1
    param p2 // #2
    T10 = call f_QuickSort
    l10: // stmt: ifonly - lskip
    return 0
    return 0 // stmt: func epilog
end f_QuickSort

f_getMid [1]
var T11 // local: mid
var t91
var t92
var t93
var t94
var t95
var t96
var t97
var t98
var t99
var t100
var t101
var t102
var t103
var t104
var t105
var t106
    t92 = T0 % 2
    if t92 != 0 goto l21 // stmt: ifelse
    T11 = T0 / 2
    t97 = 4 * T11
    t98 = p0 + t97
    t96 = t98 [0]
    t101 = T11 - 1
    t100 = 4 * t101
    t102 = p0 + t100
    t99 = t102 [0]
    t95 = t96 + t99
    t94 = t95 / 2
    return t94
    goto l22 // stmt: ifelse - true done
    l21: // stmt: ifelse - lfalse
    T11 = T0 / 2
    t105 = 4 * T11
    t106 = p0 + t105
    t104 = t106 [0]
    return t104
    l22: // stmt: ifelse - ldone
    return 0 // stmt: func epilog
end f_getMid

f_getMost [1]
var 4000 T12 // local: count
var T13 // local: i
var t107
var t108
var t109
var t110
var T14 // local: max
var T15 // local: number
var t111
var T16 // local: num
var t112
var t113
var t114
var t115
var t116
var t117
var t118
var t119
var t120
var t121
var t122
var t123
var t124
var t125
var t126
var t127
var t128
    T13 = 0
    l23: // stmt: while - ltest
    if T13 >= 1000 goto l24 // stmt: while - done
    t108 = 4 * T13
    t109 = T12 + t108
    t109 [0] = 0
    T13 = T13 + 1
    goto l23 // stmt: while - to test
    l24: // stmt: while - ldone
    T13 = 0
    T14 = 0
    l25: // stmt: while - ltest
    if T13 >= T0 goto l26 // stmt: while - done
    t113 = 4 * T13
    t114 = p0 + t113
    t112 = t114 [0]
    T16 = t112
    t117 = 4 * T16
    t118 = T12 + t117
    t116 = t118 [0]
    t115 = t116 + 1
    t119 = 4 * T16
    t120 = T12 + t119
    t120 [0] = t115
    t123 = 4 * T16
    t124 = T12 + t123
    t122 = t124 [0]
    if t122 <= T14 goto l27 // stmt: ifonly
    t126 = 4 * T16
    t127 = T12 + t126
    t125 = t127 [0]
    T14 = t125
    T15 = T16
    l27: // stmt: ifonly - lskip
    T13 = T13 + 1
    goto l25 // stmt: while - to test
    l26: // stmt: while - ldone
    return T15
    return 0 // stmt: func epilog
end f_getMost

f_revert [1]
var T17 // local: temp
var T18 // local: i
var T19 // local: j
var t129
var t130
var t131
var t132
var t133
var t134
var t135
var t136
var t137
var t138
var t139
var t140
var t141
    T18 = 0
    T19 = 0
    l28: // stmt: while - ltest
    if T18 >= T19 goto l29 // stmt: while - done
    t131 = 4 * T18
    t132 = p0 + t131
    t130 = t132 [0]
    T17 = t130
    t134 = 4 * T19
    t135 = p0 + t134
    t133 = t135 [0]
    t136 = 4 * T18
    t137 = p0 + t136
    t137 [0] = t133
    t138 = 4 * T19
    t139 = p0 + t138
    t139 [0] = T17
    T18 = T18 + 1
    T19 = T19 - 1
    goto l28 // stmt: while - to test
    l29: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_revert

f_arrCopy [2]
var T20 // local: i
var t142
var t143
var t144
var t145
var t146
var t147
var t148
    T20 = 0
    l30: // stmt: while - ltest
    if T20 >= T0 goto l31 // stmt: while - done
    t144 = 4 * T20
    t145 = p0 + t144
    t143 = t145 [0]
    t146 = 4 * T20
    t147 = p1 + t146
    t147 [0] = t143
    T20 = T20 + 1
    goto l30 // stmt: while - to test
    l31: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_arrCopy

f_calSum [2]
var T21 // local: sum
var T22 // local: i
var t149
var t150
var t151
var t152
var t153
var t154
var t155
var t156
var t157
var t158
var t159
var t160
var t161
    T21 = 0
    T22 = 0
    l32: // stmt: while - ltest
    if T22 >= T0 goto l33 // stmt: while - done
    t152 = 4 * T22
    t153 = p0 + t152
    t151 = t153 [0]
    T21 = T21 + t151
    t155 = T22 % p1
    t156 = p1 - 1
    if t155 == t156 goto l34 // stmt: ifelse
    t157 = 4 * T22
    t158 = p0 + t157
    t158 [0] = 0
    goto l35 // stmt: ifelse - true done
    l34: // stmt: ifelse - lfalse
    t159 = 4 * T22
    t160 = p0 + t159
    t160 [0] = T21
    T21 = 0
    l35: // stmt: ifelse - ldone
    T22 = T22 + 1
    goto l32 // stmt: while - to test
    l33: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_calSum

f_avgPooling [2]
var T23 // local: sum
var T24 // local: i
var T25 // local: lastnum
var t162
var t163
var t164
var t165
var t166
var t167
var t168
var t169
var t170
var t171
var t172
var t173
var t174
var t175
var t176
var t177
var t178
var t179
var t180
var t181
var t182
var t183
var t184
var t185
var t186
var t187
var t188
var t189
var t190
var t191
var t192
var t193
var t194
    T24 = 0
    T23 = 0
    l36: // stmt: while - ltest
    if T24 >= T0 goto l37 // stmt: while - done
    t164 = p1 - 1
    if T24 >= t164 goto l38 // stmt: ifelse
    t167 = 4 * T24
    t168 = p0 + t167
    t166 = t168 [0]
    T23 = T23 + t166
    goto l39 // stmt: ifelse - true done
    l38: // stmt: ifelse - lfalse
    t170 = p1 - 1
    if T24 != t170 goto l40 // stmt: ifelse
    t171 = p0 [0]
    T25 = t171
    t172 = T23 / p1
    p0 [0] = t172
    goto l41 // stmt: ifelse - true done
    l40: // stmt: ifelse - lfalse
    t176 = 4 * T24
    t177 = p0 + t176
    t175 = t177 [0]
    t174 = T23 + t175
    T23 = t174 - T25
    t181 = T24 - p1
    t180 = t181 + 1
    t179 = 4 * t180
    t182 = p0 + t179
    t178 = t182 [0]
    T25 = t178
    t183 = T23 / p1
    t186 = T24 - p1
    t185 = t186 + 1
    t184 = 4 * t185
    t187 = p0 + t184
    t187 [0] = t183
    l41: // stmt: ifelse - ldone
    l39: // stmt: ifelse - ldone
    T24 = T24 + 1
    goto l36 // stmt: while - to test
    l37: // stmt: while - ldone
    t190 = T0 - p1
    T24 = t190 + 1
    l42: // stmt: while - ltest
    if T24 >= T0 goto l43 // stmt: while - done
    t192 = 4 * T24
    t193 = p0 + t192
    t193 [0] = 0
    T24 = T24 + 1
    goto l42 // stmt: while - to test
    l43: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_avgPooling

f_main [0]
var 128 T26 // local: arr
var 128 T27 // local: result
var T28 // local: t
var t195
var t196
var t197
var t198
var t199
var T29 // local: i
var t200
var t201
var t202
var t203
var t204
var t205
var t206
var t207
var t208
var t209
var t210
var t211
var t212
var t213
var t214
var t215
var t216
var t217
var t218
var t219
var t220
var t221
var t222
var t223
var t224
var t225
var t226
var t227
var t228
var t229
var t230
var t231
var t232
var t233
var t234
var t235
var t236
var t237
var t238
var t239
var t240
var t241
var t242
var t243
var t244
var t245
var t246
var t247
var t248
var t249
var t250
var t251
var t252
var t253
var t254
var t255
var t256
var t257
var t258
var t259
var t260
var t261
var t262
var t263
var t264
var t265
    T0 = 32
    T26 [0] = 7
    T26 [4] = 23
    T26 [8] = 89
    T26 [12] = 26
    T26 [16] = 282
    T26 [20] = 254
    T26 [24] = 27
    T26 [28] = 5
    T26 [32] = 83
    T26 [36] = 273
    T26 [40] = 574
    T26 [44] = 905
    T26 [48] = 354
    T26 [52] = 657
    T26 [56] = 935
    T26 [60] = 264
    T26 [64] = 639
    T26 [68] = 459
    T26 [72] = 29
    T26 [76] = 68
    T26 [80] = 929
    T26 [84] = 756
    T26 [88] = 452
    T26 [92] = 279
    T26 [96] = 58
    T26 [100] = 87
    T26 [104] = 96
    T26 [108] = 36
    T26 [112] = 39
    T26 [116] = 28
    T26 [120] = 1
    T26 [124] = 290
    t196 = T26 + 0 // stmt: param array access
    t197 = T27 + 0 // stmt: param array access
    param t196 // #0
    param t197 // #1
    T28 = call f_arrCopy
    t199 = T27 + 0 // stmt: param array access
    param t199 // #0
    T28 = call f_revert
    T29 = 0
    l44: // stmt: while - ltest
    if T29 >= 32 goto l45 // stmt: while - done
    t202 = 4 * T29
    t203 = T27 + t202
    t201 = t203 [0]
    T28 = t201
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l44 // stmt: while - to test
    l45: // stmt: while - ldone
    t206 = T27 + 0 // stmt: param array access
    param t206 // #0
    T28 = call f_bubblesort
    T29 = 0
    l46: // stmt: while - ltest
    if T29 >= 32 goto l47 // stmt: while - done
    t209 = 4 * T29
    t210 = T27 + t209
    t208 = t210 [0]
    T28 = t208
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l46 // stmt: while - to test
    l47: // stmt: while - ldone
    t213 = T27 + 0 // stmt: param array access
    param t213 // #0
    T28 = call f_getMid
    param T28 // #0
    call f_putint
    t215 = T27 + 0 // stmt: param array access
    param t215 // #0
    T28 = call f_getMost
    param T28 // #0
    call f_putint
    t217 = T26 + 0 // stmt: param array access
    t218 = T27 + 0 // stmt: param array access
    param t217 // #0
    param t218 // #1
    T28 = call f_arrCopy
    t220 = T27 + 0 // stmt: param array access
    param t220 // #0
    T28 = call f_bubblesort
    T29 = 0
    l48: // stmt: while - ltest
    if T29 >= 32 goto l49 // stmt: while - done
    t223 = 4 * T29
    t224 = T27 + t223
    t222 = t224 [0]
    T28 = t222
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l48 // stmt: while - to test
    l49: // stmt: while - ldone
    t227 = T26 + 0 // stmt: param array access
    t228 = T27 + 0 // stmt: param array access
    param t227 // #0
    param t228 // #1
    T28 = call f_arrCopy
    t230 = T27 + 0 // stmt: param array access
    param t230 // #0
    T28 = call f_insertsort
    T29 = 0
    l50: // stmt: while - ltest
    if T29 >= 32 goto l51 // stmt: while - done
    t233 = 4 * T29
    t234 = T27 + t233
    t232 = t234 [0]
    T28 = t232
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l50 // stmt: while - to test
    l51: // stmt: while - ldone
    t237 = T26 + 0 // stmt: param array access
    t238 = T27 + 0 // stmt: param array access
    param t237 // #0
    param t238 // #1
    T28 = call f_arrCopy
    T29 = 0
    T28 = 31
    t240 = T27 + 0 // stmt: param array access
    param t240 // #0
    param T29 // #1
    param T28 // #2
    T28 = call f_QuickSort
    l52: // stmt: while - ltest
    if T29 >= 32 goto l53 // stmt: while - done
    t243 = 4 * T29
    t244 = T27 + t243
    t242 = t244 [0]
    T28 = t242
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l52 // stmt: while - to test
    l53: // stmt: while - ldone
    t247 = T26 + 0 // stmt: param array access
    t248 = T27 + 0 // stmt: param array access
    param t247 // #0
    param t248 // #1
    T28 = call f_arrCopy
    t250 = T27 + 0 // stmt: param array access
    param t250 // #0
    param 4 // #1
    T28 = call f_calSum
    T29 = 0
    l54: // stmt: while - ltest
    if T29 >= 32 goto l55 // stmt: while - done
    t253 = 4 * T29
    t254 = T27 + t253
    t252 = t254 [0]
    T28 = t252
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l54 // stmt: while - to test
    l55: // stmt: while - ldone
    t257 = T26 + 0 // stmt: param array access
    t258 = T27 + 0 // stmt: param array access
    param t257 // #0
    param t258 // #1
    T28 = call f_arrCopy
    t260 = T27 + 0 // stmt: param array access
    param t260 // #0
    param 3 // #1
    T28 = call f_avgPooling
    T29 = 0
    l56: // stmt: while - ltest
    if T29 >= 32 goto l57 // stmt: while - done
    t263 = 4 * T29
    t264 = T27 + t263
    t262 = t264 [0]
    T28 = t262
    param T28 // #0
    call f_putint
    T29 = T29 + 1
    goto l56 // stmt: while - to test
    l57: // stmt: while - ldone
    return 0
    return 0 // stmt: func epilog
end f_main

// END EEYORE
