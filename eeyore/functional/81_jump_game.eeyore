// BEGIN EEYORE
//--- GLOBAL DECL

//--- GLOBAL INIT

//--- FUNCTIONS
f_canJump [2]
var t0
var t1
var t2
var t3
var 40 T0 // local: dp
var T1 // local: i
var t4
var t5
var t6
var t7
var t8
var t9
var t10
var t11
var t12
var t13
var T2 // local: j
var t14
var t15
var t16
var t17
var t18
var t19
var t20
var t21
var t22
var t23
var t24
var t25
var t26
var t27
var t28
var t29
var t30
var t31
var t32
var t33
var t34
var t35
    if p1 != 1 goto l0 // stmt: ifonly
    return 1
    l0: // stmt: ifonly - lskip
    t2 = p0 [0]
    t3 = p1 - 2
    if t2 <= t3 goto l1 // stmt: ifonly
    return 1
    l1: // stmt: ifonly - lskip
    T1 = 0
    l2: // stmt: while - ltest
    t5 = p1 - 1
    if T1 >= t5 goto l3 // stmt: while - done
    t6 = 4 * T1
    t7 = T0 + t6
    t7 [0] = 0
    T1 = T1 + 1
    goto l2 // stmt: while - to test
    l3: // stmt: while - ldone
    t10 = p1 - 1
    t9 = 4 * t10
    t11 = T0 + t9
    t11 [0] = 1
    T1 = p1 - 2
    l4: // stmt: while - ltest
    if T1 <= -1 goto l5 // stmt: while - done
    t16 = 4 * T1
    t17 = p0 + t16
    t15 = t17 [0]
    t19 = p1 - 1
    t18 = t19 - T1
    if t15 >= t18 goto l6 // stmt: ifelse
    t21 = 4 * T1
    t22 = p0 + t21
    t20 = t22 [0]
    T2 = t20
    goto l7 // stmt: ifelse - true done
    l6: // stmt: ifelse - lfalse
    t24 = p1 - 1
    T2 = t24 - T1
    l7: // stmt: ifelse - ldone
    l8: // stmt: while - ltest
    if T2 <= -1 goto l9 // stmt: while - done
    t29 = T1 + T2
    t28 = 4 * t29
    t30 = T0 + t28
    t27 = t30 [0]
    if t27 == 0 goto l10 // stmt: ifonly
    t31 = 4 * T1
    t32 = T0 + t31
    t32 [0] = 1
    l10: // stmt: ifonly - lskip
    T2 = T2 - 1
    goto l8 // stmt: while - to test
    l9: // stmt: while - ldone
    T1 = T1 - 1
    goto l4 // stmt: while - to test
    l5: // stmt: while - ldone
    t35 = T0 [0]
    return t35
    return 0 // stmt: func epilog
end f_canJump

f_main [0]
var T3 // local: res
var 40 T4 // local: a
var t36
var t37
    T4 [0] = 3
    T4 [4] = 3
    T4 [8] = 9
    T4 [12] = 0
    T4 [16] = 0
    T4 [20] = 1
    T4 [24] = 1
    T4 [28] = 5
    T4 [32] = 7
    T4 [36] = 8
    T3 = 10
    t37 = T4 + 0 // stmt: param array access
    param t37 // #0
    param T3 // #1
    T3 = call f_canJump
    return T3
    return 0 // stmt: func epilog
end f_main

// END EEYORE
