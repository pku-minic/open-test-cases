// BEGIN EEYORE
//--- GLOBAL DECL

//--- GLOBAL INIT

//--- FUNCTIONS
f_main [0]
var T0 // local: i
var T1 // local: sum
var 40 T2 // local: a
var t0
var t1
var t2
var t3
var t4
var T3 // local: x
var T4 // local: high
var T5 // local: low
var T6 // local: mid
var T7 // local: n
var t5
var t6
var t7
var t8
var t9
var t10
var t11
var t12
var t13
var t14
var t15
var t16
var t17
var t18
var t19
var t20
var t21
var t22
var t23
var t24
var t25
var t26
    T1 = 0
    T0 = 0
    l0: // stmt: while - ltest
    if T0 >= 10 goto l1 // stmt: while - done
    t1 = T0 + 1
    t2 = 4 * T0
    t3 = T2 + t2
    t3 [0] = t1
    T0 = T0 + 1
    goto l0 // stmt: while - to test
    l1: // stmt: while - ldone
    T7 = 10
    T3 = call f_getint
    T4 = T7 - 1
    T5 = 0
    t8 = T4 + T5
    T6 = t8 / 2
    l2: // stmt: while - ltest
    t9 = 0 // stmt: op and - default value
    t12 = 4 * T6
    t13 = T2 + t12
    t11 = t13 [0]
    if t11 == T3 goto l4 // stmt: op and - test 1
    if T5 >= T4 goto l4 // stmt: op and - test 2
    t9 = 1 // stmt: op and - passed test
    l4: // stmt: op and - lskip
    if t9 == 0 goto l3 // stmt: while - done
    t16 = T4 + T5
    T6 = t16 / 2
    t19 = 4 * T6
    t20 = T2 + t19
    t18 = t20 [0]
    if T3 >= t18 goto l5 // stmt: ifelse
    T4 = T6 - 1
    goto l6 // stmt: ifelse - true done
    l5: // stmt: ifelse - lfalse
    T5 = T6 + 1
    l6: // stmt: ifelse - ldone
    goto l2 // stmt: while - to test
    l3: // stmt: while - ldone
    t25 = 4 * T6
    t26 = T2 + t25
    t24 = t26 [0]
    if T3 != t24 goto l7 // stmt: ifelse
    param T3 // #0
    call f_putint
    goto l8 // stmt: ifelse - true done
    l7: // stmt: ifelse - lfalse
    T3 = 0
    param T3 // #0
    call f_putint
    l8: // stmt: ifelse - ldone
    T3 = 10
    param T3 // #0
    call f_putch
    return 0
    return 0 // stmt: func epilog
end f_main

// END EEYORE
