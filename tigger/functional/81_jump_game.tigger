// BEGIN TIGGER
//--- SCALAR DECL

//--- ARRAY DECL

//--- FUNCTIONS
f_canJump [2] [10]
// DESTROYS: a1 a0 a2 a3 s4

//     if {reg: a1}p1 != 1 goto l0
    t1 = 1
    if a1 != t1 goto l0

//     return 1
    a0 = 1
    return

//     l0:
    l0:

//     {reg: s4}t2 = {reg: a0}p0 [0]
    s4 = a0 [0]

//     {reg: a3}t3 = {reg: a1}p1 - 2
    a3 = a1 + -2

//     if {reg: s4}t2 <= {reg: a3}t3 goto l1
    if s4 <= a3 goto l1

//     return 1
    a0 = 1
    return

//     l1:
    l1:

//     {reg: s4}T1 = 0
    s4 = 0

//     l2:
    l2:

//     {reg: a3}t5 = {reg: a1}p1 - 1
    a3 = a1 + -1

//     if {reg: s4}T1 >= {reg: a3}t5 goto l3
    if s4 >= a3 goto l3

//     {reg: a3}t6 = 4 * {reg: s4}T1
    a3 = s4 * 4 // shift left

//     {reg: a3}t7 = {stk #0 +10}T0 + {reg: a3}t6
    loadaddr 0 t0
    a3 = t0 + a3

//     {reg: a3}t7 [0] = 0
    a3 [0] = x0

//     {reg: s4}T1 = {reg: s4}T1 + 1
    s4 = s4 + 1

//     goto l2
    goto l2

//     l3:
    l3:

//     {reg: s4}t10 = {reg: a1}p1 - 1
    s4 = a1 + -1

//     {reg: s4}t9 = 4 * {reg: s4}t10
    s4 = s4 * 4 // shift left

//     {reg: s4}t11 = {stk #0 +10}T0 + {reg: s4}t9
    loadaddr 0 t0
    s4 = t0 + s4

//     {reg: s4}t11 [0] = 1
    t1 = 1
    s4 [0] = t1

//     {reg: s4}T1 = {reg: a1}p1 - 2
    s4 = a1 + -2

//     l4:
    l4:

//     if {reg: s4}T1 <= -1 goto l5
    t1 = -1
    if s4 <= t1 goto l5

//     {reg: a3}t16 = 4 * {reg: s4}T1
    a3 = s4 * 4 // shift left

//     {reg: a3}t17 = {reg: a0}p0 + {reg: a3}t16
    a3 = a0 + a3

//     {reg: a3}t15 = {reg: a3}t17 [0]
    a3 = a3 [0]

//     {reg: a2}t19 = {reg: a1}p1 - 1
    a2 = a1 + -1

//     {reg: a2}t18 = {reg: a2}t19 - {reg: s4}T1
    a2 = a2 - s4

//     if {reg: a3}t15 >= {reg: a2}t18 goto l6
    if a3 >= a2 goto l6

//     {reg: a3}t21 = 4 * {reg: s4}T1
    a3 = s4 * 4 // shift left

//     {reg: a3}t22 = {reg: a0}p0 + {reg: a3}t21
    a3 = a0 + a3

//     {reg: a2}t20 = {reg: a3}t22 [0]
    a2 = a3 [0]

//     {reg: a2}T2 = {reg: a2}t20
    a2 = a2

//     goto l7
    goto l7

//     l6:
    l6:

//     {reg: a3}t24 = {reg: a1}p1 - 1
    a3 = a1 + -1

//     {reg: a2}T2 = {reg: a3}t24 - {reg: s4}T1
    a2 = a3 - s4

//     l7:
    l7:

//     l8:
    l8:

//     if {reg: a2}T2 <= -1 goto l9
    t1 = -1
    if a2 <= t1 goto l9

//     {reg: a3}t29 = {reg: s4}T1 + {reg: a2}T2
    a3 = s4 + a2

//     {reg: a3}t28 = 4 * {reg: a3}t29
    a3 = a3 * 4 // shift left

//     {reg: a3}t30 = {stk #0 +10}T0 + {reg: a3}t28
    loadaddr 0 t0
    a3 = t0 + a3

//     {reg: a3}t27 = {reg: a3}t30 [0]
    a3 = a3 [0]

//     if {reg: a3}t27 == 0 goto l10
    if a3 == x0 goto l10

//     {reg: a3}t31 = 4 * {reg: s4}T1
    a3 = s4 * 4 // shift left

//     {reg: a3}t32 = {stk #0 +10}T0 + {reg: a3}t31
    loadaddr 0 t0
    a3 = t0 + a3

//     {reg: a3}t32 [0] = 1
    t1 = 1
    a3 [0] = t1

//     l10:
    l10:

//     {reg: a2}T2 = {reg: a2}T2 - 1
    a2 = a2 + -1

//     goto l8
    goto l8

//     l9:
    l9:

//     {reg: s4}T1 = {reg: s4}T1 - 1
    s4 = s4 + -1

//     goto l4
    goto l4

//     l5:
    l5:

//     {reg: a0}t35 = {stk #0 +10}T0 [0]
    loadaddr 0 t1
    a0 = t1 [0]

//     return {reg: a0}t35
    a0 = a0
    return
end f_canJump

f_main [0] [12]
// DESTROYS: s4 a3 a2 a1 a0

//     {stk #0 +10}T4 [0] = 3
    loadaddr 0 t1
    t0 = 3
    t1 [0] = t0

//     {stk #0 +10}T4 [4] = 3
    loadaddr 1 t1
    t0 = 3
    t1 [0] = t0

//     {stk #0 +10}T4 [8] = 9
    loadaddr 2 t1
    t0 = 9
    t1 [0] = t0

//     {stk #0 +10}T4 [12] = 0
    loadaddr 3 t1
    t1 [0] = x0

//     {stk #0 +10}T4 [16] = 0
    loadaddr 4 t1
    t1 [0] = x0

//     {stk #0 +10}T4 [20] = 1
    loadaddr 5 t1
    t0 = 1
    t1 [0] = t0

//     {stk #0 +10}T4 [24] = 1
    loadaddr 6 t1
    t0 = 1
    t1 [0] = t0

//     {stk #0 +10}T4 [28] = 5
    loadaddr 7 t1
    t0 = 5
    t1 [0] = t0

//     {stk #0 +10}T4 [32] = 7
    loadaddr 8 t1
    t0 = 7
    t1 [0] = t0

//     {stk #0 +10}T4 [36] = 8
    loadaddr 9 t1
    t0 = 8
    t1 [0] = t0

//     {reg: a1}T3 = 10
    a1 = 10

//     {reg: a0}t37 = {stk #0 +10}T4 + 0
    loadaddr 0 t0
    a0 = t0 + 0



//     param {reg: a0}t37 // #0
//     param {reg: a1}T3 // #1
//     {reg: a1}T3 = call f_canJump
    a0 = a0
    a1 = a1
    call f_canJump
    a1 = a0

//     return {reg: a1}T3
    a0 = a1
    return
end f_main

// END TIGGER
