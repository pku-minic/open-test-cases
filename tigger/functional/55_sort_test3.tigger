// BEGIN TIGGER
//--- SCALAR DECL
v0 = 0

//--- ARRAY DECL

//--- FUNCTIONS
f_QuickSort [3] [6]
// DESTROYS: t5 a2 a1 t4 t3 a0 t6 a3 t2 s4

//     if {reg: a1}p1 >= {reg: a2}p2 goto l0
    if a1 >= a2 goto l0

//     {reg: t5}T1 = {reg: a1}p1
    t5 = a1

//     {reg: t6}T2 = {reg: a2}p2
    t6 = a2

//     {reg: a3}t2 = 4 * {reg: a1}p1
    a3 = a1 * 4 // shift left

//     {reg: a3}t3 = {reg: a0}p0 + {reg: a3}t2
    a3 = a0 + a3

//     {reg: a3}t1 = {reg: a3}t3 [0]
    a3 = a3 [0]

//     {reg: t4}T3 = {reg: a3}t1
    t4 = a3

//     l1:
    l1:

//     if {reg: t5}T1 >= {reg: t6}T2 goto l2
    if t5 >= t6 goto l2

//     l3:
    l3:

//     {reg: t3}t5 = 0
    t3 = 0

//     if {reg: t5}T1 >= {reg: t6}T2 goto l5
    if t5 >= t6 goto l5

//     {reg: a3}t9 = 4 * {reg: t6}T2
    a3 = t6 * 4 // shift left

//     {reg: s4}t10 = {reg: a0}p0 + {reg: a3}t9
    s4 = a0 + a3

//     {reg: a3}t8 = {reg: s4}t10 [0]
    a3 = s4 [0]

//     {reg: t2}t11 = {reg: t4}T3 - 1
    t2 = t4 + -1

//     if {reg: a3}t8 <= {reg: t2}t11 goto l5
    if a3 <= t2 goto l5

//     {reg: t3}t5 = 1
    t3 = 1

//     l5:
    l5:

//     if {reg: t3}t5 == 0 goto l4
    if t3 == x0 goto l4

//     {reg: t6}T2 = {reg: t6}T2 - 1
    t6 = t6 + -1

//     goto l3
    goto l3

//     l4:
    l4:

//     if {reg: t5}T1 >= {reg: t6}T2 goto l6
    if t5 >= t6 goto l6

//     {reg: a3}t15 = 4 * {reg: t6}T2
    a3 = t6 * 4 // shift left

//     {reg: a3}t16 = {reg: a0}p0 + {reg: a3}t15
    a3 = a0 + a3

//     {reg: a3}t14 = {reg: a3}t16 [0]
    a3 = a3 [0]

//     {reg: t2}t17 = 4 * {reg: t5}T1
    t2 = t5 * 4 // shift left

//     {reg: t2}t18 = {reg: a0}p0 + {reg: t2}t17
    t2 = a0 + t2

//     {reg: t2}t18 [0] = {reg: a3}t14
    t2 [0] = a3

//     {reg: t5}T1 = {reg: t5}T1 + 1
    t5 = t5 + 1

//     l6:
    l6:

//     l7:
    l7:

//     {reg: a3}t20 = 0
    a3 = 0

//     if {reg: t5}T1 >= {reg: t6}T2 goto l9
    if t5 >= t6 goto l9

//     {reg: t2}t24 = 4 * {reg: t5}T1
    t2 = t5 * 4 // shift left

//     {reg: t2}t25 = {reg: a0}p0 + {reg: t2}t24
    t2 = a0 + t2

//     {reg: s4}t23 = {reg: t2}t25 [0]
    s4 = t2 [0]

//     if {reg: s4}t23 >= {reg: t4}T3 goto l9
    if s4 >= t4 goto l9

//     {reg: a3}t20 = 1
    a3 = 1

//     l9:
    l9:

//     if {reg: a3}t20 == 0 goto l8
    if a3 == x0 goto l8

//     {reg: t5}T1 = {reg: t5}T1 + 1
    t5 = t5 + 1

//     goto l7
    goto l7

//     l8:
    l8:

//     if {reg: t5}T1 >= {reg: t6}T2 goto l10
    if t5 >= t6 goto l10

//     {reg: a3}t29 = 4 * {reg: t5}T1
    a3 = t5 * 4 // shift left

//     {reg: a3}t30 = {reg: a0}p0 + {reg: a3}t29
    a3 = a0 + a3

//     {reg: a3}t28 = {reg: a3}t30 [0]
    a3 = a3 [0]

//     {reg: t2}t31 = 4 * {reg: t6}T2
    t2 = t6 * 4 // shift left

//     {reg: t2}t32 = {reg: a0}p0 + {reg: t2}t31
    t2 = a0 + t2

//     {reg: t2}t32 [0] = {reg: a3}t28
    t2 [0] = a3

//     {reg: t6}T2 = {reg: t6}T2 - 1
    t6 = t6 + -1

//     l10:
    l10:

//     goto l1
    goto l1

//     l2:
    l2:

//     {reg: a3}t34 = 4 * {reg: t5}T1
    a3 = t5 * 4 // shift left

//     {reg: a3}t35 = {reg: a0}p0 + {reg: a3}t34
    a3 = a0 + a3

//     {reg: a3}t35 [0] = {reg: t4}T3
    a3 [0] = t4

//     {reg: a3}T4 = {reg: t5}T1 - 1
    a3 = t5 + -1

//     {reg: t2}t38 = {reg: a0}p0 + 0
    t2 = a0 + 0




//     param {reg: t2}t38 // #0
//     param {reg: a1}p1 // #1
//     param {reg: a3}T4 // #2
//     {reg: a3}T4 = call f_QuickSort
    store a2 0
    store a0 1
    store t5 2
    a0 = t2
    a1 = a1
    a2 = a3
    call f_QuickSort
    load 0 a2
    load 1 a0
    load 2 t5

//     {reg: a3}T4 = {reg: t5}T1 + 1
    a3 = t5 + 1

//     {reg: t2}t41 = {reg: a0}p0 + 0
    t2 = a0 + 0




//     param {reg: t2}t41 // #0
//     param {reg: a3}T4 // #1
//     param {reg: a2}p2 // #2
//     {reg: a3}T4 = call f_QuickSort
    a0 = t2
    a1 = a3
    a2 = a2
    call f_QuickSort

//     l0:
    l0:

//     return 0
    a0 = 0
    return
end f_QuickSort

f_main [0] [13]
// DESTROYS: a4 a5 t0 a6 t1 a3 t3 t4 a1 t5 a2 a7 t2 s4 a0 t6

//     {global}T0 = 10
    t0 = 10
    loadaddr v0 t1
    t1 [0] = t0

//     {stk #0 +10}T5 [0] = 4
    loadaddr 0 t1
    t0 = 4
    t1 [0] = t0

//     {stk #0 +10}T5 [4] = 3
    loadaddr 1 t1
    t0 = 3
    t1 [0] = t0

//     {stk #0 +10}T5 [8] = 9
    loadaddr 2 t1
    t0 = 9
    t1 [0] = t0

//     {stk #0 +10}T5 [12] = 2
    loadaddr 3 t1
    t0 = 2
    t1 [0] = t0

//     {stk #0 +10}T5 [16] = 0
    loadaddr 4 t1
    t1 [0] = x0

//     {stk #0 +10}T5 [20] = 1
    loadaddr 5 t1
    t0 = 1
    t1 [0] = t0

//     {stk #0 +10}T5 [24] = 6
    loadaddr 6 t1
    t0 = 6
    t1 [0] = t0

//     {stk #0 +10}T5 [28] = 5
    loadaddr 7 t1
    t0 = 5
    t1 [0] = t0

//     {stk #0 +10}T5 [32] = 7
    loadaddr 8 t1
    t0 = 7
    t1 [0] = t0

//     {stk #0 +10}T5 [36] = 8
    loadaddr 9 t1
    t0 = 8
    t1 [0] = t0

//     {reg: a1}T6 = 0
    a1 = 0

//     {reg: a2}T7 = 9
    a2 = 9

//     {reg: a0}t43 = {stk #0 +10}T5 + 0
    loadaddr 0 t0
    a0 = t0 + 0




//     param {reg: a0}t43 // #0
//     param {reg: a1}T6 // #1
//     param {reg: a2}T7 // #2
//     {reg: a1}T6 = call f_QuickSort
    a0 = a0
    a1 = a1
    a2 = a2
    call f_QuickSort
    a1 = a0

//     l11:
    l11:

//     if {reg: a1}T6 >= {global}T0 goto l12
    load v0 t1
    if a1 >= t1 goto l12

//     {reg: s4}t46 = 4 * {reg: a1}T6
    s4 = a1 * 4 // shift left

//     {reg: s4}t47 = {stk #0 +10}T5 + {reg: s4}t46
    loadaddr 0 t0
    s4 = t0 + s4

//     {reg: a0}t45 = {reg: s4}t47 [0]
    a0 = s4 [0]

//     {reg: a0}T8 = {reg: a0}t45
    a0 = a0


//     param {reg: a0}T8 // #0
//     call f_putint
    store a1 10
    a0 = a0
    call f_putint
    load 10 a1

//     {reg: a0}T8 = 10
    a0 = 10


//     param {reg: a0}T8 // #0
//     call f_putch
    store a1 10
    a0 = a0
    call f_putch
    load 10 a1

//     {reg: a1}T6 = {reg: a1}T6 + 1
    a1 = a1 + 1

//     goto l11
    goto l11

//     l12:
    l12:

//     return 0
    a0 = 0
    return
end f_main

// END TIGGER
